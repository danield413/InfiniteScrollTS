{"version":3,"sources":["context/reducer.ts","context/context.tsx","helpers/getGifs.ts","hooks/useForm.ts","components/Form.tsx","components/Layout.tsx","components/Spinner.tsx","components/Card.tsx","components/ListGifs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["reducer","state","action","type","gifs","concat","payload","data","loading","query","offset","initialValue","GifsContext","React","createContext","dispatch","useGifs","useContext","ContextProvider","children","useReducer","Provider","value","getGifs","a","axios","url","method","params","process","REACT_APP_API_KEY","resp","console","log","useForm","search","useState","values","setValues","handleChange","target","name","reset","Form","handleSubmit","e","preventDefault","length","res","className","onSubmit","onChange","autoComplete","placeholder","Layout","Spinner","Card","lastElementRef","title","ref","src","alt","memo","ListGifs","observer","useRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","rootMargin","observe","map","index","images","downsized","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dae6cf57.chunk.js","sourcesContent":["\r\ntype Action = {\r\n    type: string\r\n    payload: any\r\n}\r\n\r\ntype State = {\r\n    gifs: Array<any>,\r\n    offset: number,\r\n    query: string,\r\n    loading: boolean\r\n}\r\n\r\nconst reducer = (state: State, action: Action) => {\r\n    switch (action.type) {\r\n        case 'ADD':\r\n            return {\r\n                ...state,\r\n                gifs: state.gifs.concat(action.payload.data),\r\n                loading: false,\r\n                query: action.payload.query\r\n            }\r\n        case 'LOAD': \r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case 'CHANGE-OFFSET': \r\n            return {\r\n                ...state,\r\n                offset: state.offset + 10\r\n            }\r\n        case 'RESET-QUERY':\r\n            return {\r\n                ...state,\r\n                gifs: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default reducer;","import React from 'react'\r\nimport { useReducer } from 'react';\r\nimport { useContext } from 'react';\r\nimport reducer from './reducer';\r\n\r\nconst initialValue = {\r\n    gifs: [],\r\n    offset: 0,\r\n    loading: false,\r\n    query: ''\r\n}\r\n\r\ntype Init = {\r\n    state: any\r\n    dispatch: any\r\n}\r\n//Partial<ContextProps>\r\nconst GifsContext = React.createContext<Init>({ state: {}, dispatch : () => {}});\r\n\r\nexport const useGifs = () => {\r\n    return useContext(GifsContext);\r\n}\r\n\r\nconst ContextProvider = ({children}: JSX.ElementChildrenAttribute) : JSX.Element => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialValue)\r\n    \r\n    return (\r\n        <GifsContext.Provider value={ {state, dispatch} }>\r\n            {children}\r\n        </GifsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ContextProvider;\r\n","import axios from \"axios\";\r\n\r\n\r\nconst getGifs = async ( offset: number = 0, query: string = '') => {\r\n\r\n    try {\r\n            const resp = await axios({\r\n                url: 'https://api.giphy.com/v1/gifs/search',\r\n                method: 'GET',\r\n                params: {\r\n                    'api_key' : process.env.REACT_APP_API_KEY,\r\n                    'q': query,\r\n                    'offset': offset,\r\n                    'limit': 10\r\n                }\r\n            })\r\n            return resp\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport default getGifs;","import { ChangeEvent, useState } from \"react\"\r\n\r\nconst useForm = ( initialValue: { search: '' } = { search: ''} ) => {\r\n\r\n    const [values, setValues] = useState(initialValue)\r\n\r\n    const handleChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\r\n        setValues({\r\n            ...values,\r\n            [ target.name ] : target.value\r\n        })\r\n    }\r\n\r\n    const reset = () => {\r\n        setValues({ search: ''})\r\n    }\r\n\r\n    return { values, handleChange, reset }\r\n\r\n}\r\n\r\nexport default useForm;","import React from 'react'\r\nimport { useGifs } from '../context/context';\r\nimport getGifs from '../helpers/getGifs';\r\nimport useForm from '../hooks/useForm';\r\n\r\nconst Form = (): JSX.Element => {\r\n\r\n    const { dispatch } = useGifs();\r\n\r\n    const { values, handleChange, reset } = useForm({\r\n        search: ''\r\n    });\r\n    const { search } = values;\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        if(search.length === 0) return;\r\n\r\n        dispatch({\r\n            type: 'RESET-QUERY'\r\n        })\r\n        dispatch({\r\n            type: 'LOAD'\r\n        });\r\n        const res = await getGifs(0, search);\r\n        dispatch({\r\n            type: 'ADD',\r\n            payload: {\r\n                data: res.data.data,\r\n                query: search\r\n            }\r\n        });\r\n        reset();\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                className=\"input\"\r\n                name=\"search\" \r\n                onChange={handleChange} \r\n                value={values.search}\r\n                autoComplete=\"off\"\r\n                placeholder=\"Escribe algo aquÃ­...\"\r\n            />\r\n            <button type=\"submit\" className=\"submit\">Buscar</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react'\r\n\r\nconst Layout = ({children}: JSX.ElementChildrenAttribute): JSX.Element => {\r\n    return (\r\n        <div className=\"layout\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\n\r\nconst Spinner = () : JSX.Element => {\r\n    return (\r\n        <div className=\"sk-chase\">\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\ntype CardTypes = {\r\n    lastElementRef: null | any\r\n    title: string\r\n    url: string\r\n}\r\n\r\nconst Card = ({lastElementRef, title, url}: CardTypes) : JSX.Element => {\r\n\r\n    return (\r\n        <>\r\n        { lastElementRef && <div ref={lastElementRef} className=\"card\">\r\n            <div className=\"card-center\">\r\n                <div className=\"img\">\r\n                    <img src={url} alt={title} />\r\n                </div>\r\n                <p>{title}</p>\r\n                </div>\r\n            </div>}\r\n        { !lastElementRef && <div className=\"card\">\r\n            <div className=\"card-center\">\r\n                <div className=\"img\">\r\n                    <img src={url} alt={title} />\r\n                    </div>\r\n                    <p>{title}</p>\r\n                </div>\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nCard.propTypes = {\r\n    lastElementRef: PropTypes.func,\r\n    title: PropTypes.string,\r\n    url: PropTypes.string\r\n}\r\n\r\nexport default React.memo(Card)\r\n","import { useCallback, useRef } from 'react'\r\nimport { useGifs } from '../context/context'\r\nimport getGifs from '../helpers/getGifs';\r\nimport Spinner from './Spinner';\r\nimport Card from './Card';\r\n\r\ntype Image = {\r\n    images: {\r\n        downsized: {\r\n            url: string\r\n        }\r\n    }\r\n    title: string\r\n}\r\n\r\nconst ListGifs = () : JSX.Element => {\r\n\r\n    const { state, dispatch } = useGifs();\r\n    const { gifs, loading, offset, query } = state;\r\n    // const elementRef = useRef<HTMLDivElement>(null);\r\n\r\n    const observer = useRef<null | IntersectionObserver>()\r\n    // La funciÃ³n se memoriza y estÃ¡ activa hasta que cambia el ref es decir, el ultimo elemento. Cuando este cambia la funciÃ³n se actualiza y vuelve a hacer un observer de ese Ãºltimo elemento y asÃ­ sucesivamente\r\n    const lastElementRef = useCallback( node => {\r\n        if (loading) return;\r\n        if (observer.current) observer.current.disconnect();\r\n\r\n        observer.current = new IntersectionObserver( async entries => {\r\n        if (entries[0].isIntersecting && !loading) {\r\n                dispatch({\r\n                        type: 'CHANGE-OFFSET'\r\n                })\r\n                dispatch({\r\n                    type: 'LOAD'\r\n                });\r\n                const res = await getGifs(offset, query);\r\n                dispatch({\r\n                    type: 'ADD',\r\n                    payload: {\r\n                        data: res && res.data.data,\r\n                        query\r\n                    }\r\n                });\r\n        }\r\n        }, { rootMargin: '0px' })\r\n        if (node) observer.current.observe(node)\r\n\r\n        return () => observer.current.disconnect();\r\n\r\n    }, [loading, offset, query, dispatch])\r\n\r\n    // useEffect(() => {\r\n    //     let observer: any;\r\n    //     if(gifs.length > 0 ) {\r\n\r\n    //         const onChange = async (entries: Array<IntersectionObserverEntry>, observer: any) => {\r\n    //             const element = entries[0];\r\n    //             if(element.isIntersecting) {\r\n    //                 //Do anything\r\n    //                 // console.log(element.isIntersecting, 'visible')\r\n    //                 dispatch({\r\n    //                     type: 'CHANGE-OFFSET'\r\n    //                 })\r\n    //                 dispatch({\r\n    //                     type: 'LOAD'\r\n    //                 });\r\n    //                 const res = await getGifs(offset, query);\r\n    //                 dispatch({\r\n    //                     type: 'ADD',\r\n    //                     payload: {\r\n    //                         data: res && res.data.data,\r\n    //                         query\r\n    //                     }\r\n    //                 });\r\n    //                 observer.disconnect()\r\n    //             }\r\n    //         }\r\n    //         const observer = new IntersectionObserver(onChange, {\r\n    //             rootMargin: '0px'\r\n    //         })\r\n    \r\n    //         observer.observe(elementRef.current)\r\n    //     }\r\n\r\n    //     return () => observer && observer.disconnect()\r\n\r\n    // }, [gifs, offset, query, dispatch]);\r\n    \r\n\r\n    return (\r\n        <div className=\"list-gifs  animate__animated animate__fadeIn\">\r\n            {gifs && gifs.map( ({images, title} : Image, index: number) => {\r\n                if( gifs.length === index + 1 ) {\r\n                    return  <Card key={index} lastElementRef={lastElementRef} title={title} url={images.downsized.url} />\r\n                } else {\r\n                    return  <Card key={index} lastElementRef={null} title={title} url={images.downsized.url} />\r\n                }\r\n            })}\r\n            { loading && <Spinner />}\r\n            {(!loading && gifs.length === 0) && <> <h1 className=\"text title\">Buscador de Gifs</h1> <h2 className=\"text\">Con scroll infinito</h2> <p className=\"text sub\">por Daniel DÃ­az</p></>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListGifs\r\n","import React from 'react';\nimport 'normalize.css';\nimport 'animate.css';\nimport './App.css';\nimport Form from './components/Form';\nimport Layout from './components/Layout';\nimport ListGifs from './components/ListGifs';\n\nfunction App(): JSX.Element {\n  return (\n    <>\n      <header>\n        <Form />\n      </header>\n      <Layout>\n        <main>\n          <ListGifs />\n        </main>\n      </Layout>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ContextProvider from './context/context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider>\n      <App />\n    </ContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}